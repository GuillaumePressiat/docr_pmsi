var searchIndex = JSON.parse('{\
"pmsi_rust":{"doc":"","t":"AAFAFAFFAAAFFFFFFFFFFFFFFF","n":["cli","core","pmsi_rust_cli","mco","parse_pmsi","utils","parse_rsa","parse_rum","formats","io","parse_fwf","_get_pattern_rg","get_champ_longueur","get_champ_nom","get_champ_position","get_champ_type","get_extension_from_filename","get_formats","get_pattern_cur","get_patterns","get_vec_type","map_extension","configure_the_environment","pmsi_read_lines","write_to_somefile","parse_pmsi_fwf"],"q":[[0,"pmsi_rust"],[2,"pmsi_rust::cli"],[3,"pmsi_rust::core"],[6,"pmsi_rust::core::mco"],[8,"pmsi_rust::core::utils"],[11,"pmsi_rust::core::utils::formats"],[22,"pmsi_rust::core::utils::io"],[25,"pmsi_rust::core::utils::parse_fwf"],[26,"alloc::string"],[27,"polars_core::frame"],[28,"polars_error"],[29,"core::result"],[30,"std::collections::hash::map"],[31,"alloc::vec"],[32,"core::error"],[33,"alloc::boxed"],[34,"core::option"],[35,"core::default"],[36,"polars_lazy::frame"]],"d":["pmsi_rust en ligne de commande","pmsi_rust en appel dans un programme rust","pmsi_rust CLI ; en ligne de commande","Spécifique aux formats du MCO (partie variable rsa ou rum)","Fonction de découpage générique PMSI","Boite à outils","Fonction de découpage des RSA","Fonction de découpage des RSS / RUM","Module pour générer les formats de découpage","Module pour les entrées / sorties","Module pour découper les données à largeur fixe","Obtenir un pattern (regexp)","Obtenir les positions des champs (pour fwf)","Obtenir les noms des champs (pour fwf)","Obtenir les positions des champs (pour fwf)","Obtenir les types des champs (pour fwf)","Extension d’un fichier","Obtenir les formats d’une table pour une année et un …","Obtenir un pattern (curseur)","","utile pour convertir une série pola.rs en vecteur typé","Correspondance entre l’extension du fichier et le format …","Options de formattage pola.rs fixées par défaut","Importer un fichier pmsi en une seule colonne l dans un …","écrire un polars DataFrame vers un fichier","Fonction de découpage d’une colonne à largeur fixe"],"i":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],"f":[0,0,[[],1],0,[[2,2,2],[[5,[3,4]]]],0,[[2,2],[[5,[[6,[2,3]],4]]]],[[2,2],[[5,[[6,[2,3]],4]]]],0,0,0,[3,[[5,[[8,[7]],[10,[9]]]]]],[3,[[5,[[8,[11]],[10,[9]]]]]],[3,[[5,[[8,[7]],[10,[9]]]]]],[3,[[5,[[8,[11]],[10,[9]]]]]],[3,[[5,[[8,[7]],[10,[9]]]]]],[7,[[12,[7]]]],[[[14,[13]],[14,[13]],[14,[13]]],[[5,[3,4]]]],[3,[[5,[[8,[15]],[10,[9]]]]]],[[[14,[13]],[14,[13]],[14,[13]]],[[5,[3,4]]]],[[[8,[[12,[-1]]]]],[[8,[-1]]],16],[2,7],[[],1],[2,[[5,[17,4]]]],[[17,2],1],[[17,2,2],[[5,[17,4]]]]],"c":[],"p":[[15,"tuple"],[3,"String",26],[3,"DataFrame",27],[4,"PolarsError",28],[4,"Result",29],[3,"HashMap",30],[15,"str"],[3,"Vec",31],[8,"Error",32],[3,"Box",33],[15,"i64"],[4,"Option",34],[15,"u8"],[15,"slice"],[15,"i32"],[8,"Default",35],[3,"LazyFrame",36]],"b":[]}\
}');
if (typeof window !== 'undefined' && window.initSearch) {window.initSearch(searchIndex)};
if (typeof exports !== 'undefined') {exports.searchIndex = searchIndex};
